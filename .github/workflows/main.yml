name: Build & Release

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master, develop]

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HOME }}/.pub-cache
            /opt/hostedtoolcache/flutter
          key: flutter-${{ runner.os }}-3.24.3-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-3.24.3-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          architecture: x64
          cache: true

      - name: Verify Flutter setup
        run: |
          flutter doctor
          flutter --version

      - name: Check and update dependencies
        run: |
          flutter pub get
          dart pub outdated # Check for outdated dependencies
          # Optionally upgrade dependencies if safe
          # flutter pub upgrade --dry-run # Uncomment to test upgrades

      - name: Create .env file
        run: |
          echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_UPLOAD_PRESET=${{ secrets.CLOUDINARY_UPLOAD_PRESET }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env

      # Use the setup-shorebird action to configure Shorebird
      - name: 🐦 Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true # Optionally cache your Shorebird installation

      # Now we're able to use Shorebird CLI in our workflow
      - name: 🚀 Use Shorebird
        run: shorebird --version

      - name: Build APK
        run: flutter build apk --release --split-per-abi

      - name: Check for version or asset changes
        if: github.event_name == 'push'
        id: version_check
        run: |
          # Check pubspec.yaml version
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          git checkout HEAD^ --quiet
          PREVIOUS_VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' || echo "")
          # Check for changes in .env or NOTICES.Z
          ASSET_CHANGES=$(git diff HEAD^ HEAD --name-only | grep -E '(.env|NOTICES.Z)' || echo "")
          git checkout - --quiet
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] || [ -n "$ASSET_CHANGES" ]; then
            echo "Version or assets changed (.env or NOTICES.Z). Creating release."
            echo "create_release=true" >> $GITHUB_OUTPUT
          else
            echo "No version or asset changes. Creating patch."
            echo "create_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Shorebird Patch
        if: github.event_name == 'push' && steps.version_check.outputs.create_release == 'false' && github.ref == 'refs/heads/develop'
        run: shorebird patch android --verbose
        env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

      - name: Upload to GitHub Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*.apk"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
